{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\thermitt\\\\Desktop\\\\projects\\\\next\\\\hello-next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import Link from 'next/link';// This is client-side navigation; the action takes place in the browser, without making a request to the server. You can verify this by opening your browser's network request inspector.\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch'; // const PostLink = props => (\n//   <li>\n//     <Link href={`/post?title=${props.title}`}>\n//       <a>{props.title}</a>\n//     </Link>\n//   </li>\n// <li>\n// <Link href=\"/p/[id]\" as={`/p/${props.id}`}>\n//   <a>{props.id}</a>\n// </Link>\n// </li>\n// );\n// In the <Link> element, the href prop is now the path of the page in the pages folder and as is the URL to show in URL bar of the browser.\n// dynamic routing works pretty nicely with the browser history, all you have to do is to add the as prop to the link component.\n\nvar Index = function Index(props) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Batman TV Shows\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, props.shows.map(function (show) {\n    return __jsx(\"li\", {\n      key: show.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(show.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, show.name)));\n  })));\n};\n\nIndex.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var res, data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('https://api.tvmaze.com/search/shows?q=batman');\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return res.json();\n\n        case 5:\n          data = _context.sent;\n          console.log(data);\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index; // export default function Blog() {\n//   return (\n//     <Layout>\n//       <h1>My Blog</h1>\n//       <ul>\n//         <PostLink id=\"Hello Next.js\" />\n//         <PostLink id=\"Learn Next.js is awesome\" />\n//         <PostLink id=\"Deploy apps with Zeit\" />\n//       </ul>\n//     </Layout>\n//   );\n// }\n//   Next.js is all about pages. We can create a page by exporting a React component, and putting that component inside the pages directory. Then it will have a fixed URL based on the file name.\n//   the child of the next/link component is the anchor tag. It can also work with any other component or tag, the only requirement for components placed inside <Link /> is that they should accept an onClick prop.\n// We don't need to put our components in a special directory; the directory can be named anything. The only special directories are /pages and /public.\n//FETCH\n// First of all we need to install isomorphic-unfetch. That's the library we are going to use to fetch data. It's a simple implementation of the browser fetch API, but works both in client and server environments.","map":{"version":3,"sources":["C:/Users/thermitt/Desktop/projects/next/hello-next/pages/index.js"],"names":["Layout","Link","fetch","Index","props","shows","map","show","id","name","getInitialProps","res","json","data","console","log","length","entry"],"mappings":";;;;;AAAA;AACA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SACf,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,WACnB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAAQD,IAAI,CAACC,EAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,IAAT,CADF,CADF,CADmB;AAAA,GAApB,CADH,CAFA,CADe;AAAA,CAAnB;;AAiBAN,KAAK,CAACO,eAAN;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACJR,KAAK,CAAC,8CAAD,CADD;;AAAA;AAChBS,UAAAA,GADgB;AAAA;AAAA,iBAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAItBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AALsB,2CAOf;AACLX,YAAAA,KAAK,EAAEQ,IAAI,CAACP,GAAL,CAAS,UAAAW,KAAK;AAAA,qBAAIA,KAAK,CAACV,IAAV;AAAA,aAAd;AADF,WAPe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAYA,eAAeJ,KAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["// import Link from 'next/link';// This is client-side navigation; the action takes place in the browser, without making a request to the server. You can verify this by opening your browser's network request inspector.\r\nimport Layout from '../components/MyLayout';\r\nimport Link from 'next/link';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\n// const PostLink = props => (\r\n//   <li>\r\n//     <Link href={`/post?title=${props.title}`}>\r\n//       <a>{props.title}</a>\r\n//     </Link>\r\n//   </li>\r\n\r\n    // <li>\r\n    // <Link href=\"/p/[id]\" as={`/p/${props.id}`}>\r\n    //   <a>{props.id}</a>\r\n    // </Link>\r\n    // </li>\r\n    // );\r\n// In the <Link> element, the href prop is now the path of the page in the pages folder and as is the URL to show in URL bar of the browser.\r\n// dynamic routing works pretty nicely with the browser history, all you have to do is to add the as prop to the link component.\r\n    \r\nconst Index = props => (\r\n    <Layout>\r\n    <h1>Batman TV Shows</h1>\r\n    <ul>\r\n      {props.shows.map(show => (\r\n        <li key={show.id}>\r\n          <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\r\n            <a>{show.name}</a>\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n    </Layout>\r\n\r\n);\r\n\r\n\r\nIndex.getInitialProps = async function() {\r\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\r\n  const data = await res.json();\r\n\r\n  console.log(data);\r\n  console.log(`Show data fetched. Count: ${data.length}`);\r\n\r\n  return {\r\n    shows: data.map(entry => entry.show)\r\n  };\r\n};\r\n\r\nexport default Index;\r\n\r\n\r\n// export default function Blog() {\r\n//   return (\r\n//     <Layout>\r\n//       <h1>My Blog</h1>\r\n//       <ul>\r\n//         <PostLink id=\"Hello Next.js\" />\r\n//         <PostLink id=\"Learn Next.js is awesome\" />\r\n//         <PostLink id=\"Deploy apps with Zeit\" />\r\n//       </ul>\r\n//     </Layout>\r\n//   );\r\n// }\r\n\r\n//   Next.js is all about pages. We can create a page by exporting a React component, and putting that component inside the pages directory. Then it will have a fixed URL based on the file name.\r\n//   the child of the next/link component is the anchor tag. It can also work with any other component or tag, the only requirement for components placed inside <Link /> is that they should accept an onClick prop.\r\n// We don't need to put our components in a special directory; the directory can be named anything. The only special directories are /pages and /public.\r\n\r\n//FETCH\r\n// First of all we need to install isomorphic-unfetch. That's the library we are going to use to fetch data. It's a simple implementation of the browser fetch API, but works both in client and server environments.\r\n\r\n"]},"metadata":{},"sourceType":"module"}