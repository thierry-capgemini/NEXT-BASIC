{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thermitt\\\\Desktop\\\\projects\\\\next\\\\hello-next\\\\pages\\\\p\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { useRouter } from 'next/router';\n// import Layout from '../../components/MyLayout';\n// export default function Post() {\n//   const router = useRouter();\n//   return (\n//     <Layout>\n//       <h1>{router.query.id}</h1>\n//       <p>This is the blog post content.</p>\n//     </Layout>\n//   );\n// }\n// Having brackets ([]) in the page name makes it a dynamic route. Currently, you can not make part of a page name dynamic, only the full name. For example, /pages/p/[id].js is supported but /pages/p/post-[id].js is not currently.\n// When creating the dynamic route we added id between the brackets ([]). This is the name of the query param received by the page, so for /p/hello-nextjs the query object will have { id: 'hello-nextjs'}, and we can access it with useRouter().\nimport Layout from '../../components/MyLayout';\nimport fetch from 'isomorphic-unfetch';\n\nconst Post = props => __jsx(Layout, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, __jsx(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, props.show.name), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, props.show.summary.replace(/<[/]?[pb]>/g, '')), __jsx(\"img\", {\n  src: props.show.image.medium,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}));\n\nPost.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}`);\n  const show = await res.json();\n  console.log(`Fetched show: ${show.name}`);\n  return {\n    show\n  };\n};\n\nexport default Post; //CONTEXT\n// The first argument of the function is the context object. It has a query object that we can use to fetch information.\n// In our example, we picked the show ID from query and used it to fetch the show data from the TVMaze API.\n// When we click on a link wrapped with the Next.js <Link> component, the page transition takes place in the browser, without making a request to the server.","map":{"version":3,"sources":["C:/Users/thermitt/Desktop/projects/next/hello-next/pages/p/[id].js"],"names":["Layout","fetch","Post","props","show","name","summary","replace","image","medium","getInitialProps","context","id","query","res","json","console","log"],"mappings":";;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,IAAI,GAAGC,KAAK,IAChB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAKA,KAAK,CAACC,IAAN,CAAWC,IAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIF,KAAK,CAACC,IAAN,CAAWE,OAAX,CAAmBC,OAAnB,CAA2B,aAA3B,EAA0C,EAA1C,CAAJ,CAFF,EAGE;AAAK,EAAA,GAAG,EAAEJ,KAAK,CAACC,IAAN,CAAWI,KAAX,CAAiBC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,CADF;;AAQAP,IAAI,CAACQ,eAAL,GAAuB,gBAAeC,OAAf,EAAwB;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAASD,OAAO,CAACE,KAAvB;AACA,QAAMC,GAAG,GAAG,MAAMb,KAAK,CAAE,gCAA+BW,EAAG,EAApC,CAAvB;AACA,QAAMR,IAAI,GAAG,MAAMU,GAAG,CAACC,IAAJ,EAAnB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBb,IAAI,CAACC,IAAK,EAAvC;AAEA,SAAO;AAAED,IAAAA;AAAF,GAAP;AACD,CARD;;AAUA,eAAeF,IAAf,C,CAEA;AACA;AACA;AAEA","sourcesContent":["// import { useRouter } from 'next/router';\r\n// import Layout from '../../components/MyLayout';\r\n\r\n// export default function Post() {\r\n//   const router = useRouter();\r\n\r\n//   return (\r\n//     <Layout>\r\n//       <h1>{router.query.id}</h1>\r\n//       <p>This is the blog post content.</p>\r\n//     </Layout>\r\n//   );\r\n// }\r\n\r\n// Having brackets ([]) in the page name makes it a dynamic route. Currently, you can not make part of a page name dynamic, only the full name. For example, /pages/p/[id].js is supported but /pages/p/post-[id].js is not currently.\r\n// When creating the dynamic route we added id between the brackets ([]). This is the name of the query param received by the page, so for /p/hello-nextjs the query object will have { id: 'hello-nextjs'}, and we can access it with useRouter().\r\n\r\n\r\nimport Layout from '../../components/MyLayout';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nconst Post = props => (\r\n  <Layout>\r\n    <h1>{props.show.name}</h1>\r\n    <p>{props.show.summary.replace(/<[/]?[pb]>/g, '')}</p>\r\n    <img src={props.show.image.medium} />\r\n  </Layout>\r\n);\r\n\r\nPost.getInitialProps = async function(context) {\r\n  const { id } = context.query;\r\n  const res = await fetch(`https://api.tvmaze.com/shows/${id}`);\r\n  const show = await res.json();\r\n\r\n  console.log(`Fetched show: ${show.name}`);\r\n\r\n  return { show };\r\n};\r\n\r\nexport default Post;\r\n\r\n//CONTEXT\r\n// The first argument of the function is the context object. It has a query object that we can use to fetch information.\r\n// In our example, we picked the show ID from query and used it to fetch the show data from the TVMaze API.\r\n\r\n// When we click on a link wrapped with the Next.js <Link> component, the page transition takes place in the browser, without making a request to the server."]},"metadata":{},"sourceType":"module"}