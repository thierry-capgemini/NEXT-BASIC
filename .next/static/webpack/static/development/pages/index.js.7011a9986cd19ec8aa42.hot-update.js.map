{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.7011a9986cd19ec8aa42.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["// import Link from 'next/link';// This is client-side navigation; the action takes place in the browser, without making a request to the server. You can verify this by opening your browser's network request inspector.\r\nimport Layout from '../components/MyLayout';\r\nimport Link from 'next/link';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\n// const PostLink = props => (\r\n//   <li>\r\n//     <Link href={`/post?title=${props.title}`}>\r\n//       <a>{props.title}</a>\r\n//     </Link>\r\n//   </li>\r\n\r\n    // <li>\r\n    // <Link href=\"/p/[id]\" as={`/p/${props.id}`}>\r\n    //   <a>{props.id}</a>\r\n    // </Link>\r\n    // </li>\r\n    // );\r\n// In the <Link> element, the href prop is now the path of the page in the pages folder and as is the URL to show in URL bar of the browser.\r\n// dynamic routing works pretty nicely with the browser history, all you have to do is to add the as prop to the link component.\r\n    \r\nconst Index = props => (\r\n    <Layout>\r\n    <h1>Batman TV Shows</h1>\r\n    <ul>\r\n      {props.shows.map(show => (\r\n        <li key={show.id}>\r\n          <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\r\n            <a>{show.name}</a>\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n    </Layout>\r\n\r\n);\r\n\r\n\r\nIndex.getInitialProps = async function() {\r\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\r\n  const data = await res.json();\r\n\r\n  console.log(data);\r\n  console.log(`Show data fetched. Count: ${data.length}`);\r\n\r\n  return {\r\n    shows: data.map(entry => entry.show)\r\n  };\r\n};\r\n\r\nexport default Index;\r\n\r\n\r\n// export default function Blog() {\r\n//   return (\r\n//     <Layout>\r\n//       <h1>My Blog</h1>\r\n//       <ul>\r\n//         <PostLink id=\"Hello Next.js\" />\r\n//         <PostLink id=\"Learn Next.js is awesome\" />\r\n//         <PostLink id=\"Deploy apps with Zeit\" />\r\n//       </ul>\r\n//     </Layout>\r\n//   );\r\n// }\r\n\r\n//   Next.js is all about pages. We can create a page by exporting a React component, and putting that component inside the pages directory. Then it will have a fixed URL based on the file name.\r\n//   the child of the next/link component is the anchor tag. It can also work with any other component or tag, the only requirement for components placed inside <Link /> is that they should accept an onClick prop.\r\n// We don't need to put our components in a special directory; the directory can be named anything. The only special directories are /pages and /public.\r\n\r\n//FETCH\r\n// First of all we need to install isomorphic-unfetch. That's the library we are going to use to fetch data. It's a simple implementation of the browser fetch API, but works both in client and server environments.\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAJA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAEA;AACA;AALA;AAQA;AAAA;AAAA;AADA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}